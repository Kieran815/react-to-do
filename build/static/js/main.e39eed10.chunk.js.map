{"version":3,"sources":["components/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","type","checked","this","props","isCompleted","onChange","toggleComplete","description","onClick","deleteTodo","Component","App","index","filteredTodos","state","todos","filter","todo","i","setState","newTodoDescription","e","target","value","preventDefault","newTodo","slice","className","map","key","onSubmit","handleSubmit","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAwBeA,G,uLAhBX,OACE,4BACE,2BACEC,KAAK,WACLC,QAAUC,KAAKC,MAAMC,YACrBC,SAAWH,KAAKC,MAAMG,iBAExB,8BAAQJ,KAAKC,MAAMI,aACnB,4BAAQC,QAASN,KAAKC,MAAMM,YAA5B,Y,GAXWC,cCwDJC,E,YAxDb,WAAYR,GAAO,IAAD,8BAChB,4CAAMA,KAiBRM,WAAa,SAACG,GACZ,IAAMC,EAAgB,EAAKC,MAAMC,MAAMC,QAAO,SAACC,EAAMC,GAAP,OAAaA,IAAKN,KAChE,EAAKO,SAAS,CAAEJ,MAAQF,KAlBxB,EAAKC,MAAQ,CACXC,MAAO,CACL,CAAER,YAAa,eAAgBH,aAAa,GAC5C,CAAEG,YAAa,eAAgBH,aAAa,GAC5C,CAAEG,YAAa,gBAAiBH,aAAa,IAE/CgB,mBAAoB,IARN,E,0EAYLC,GACXnB,KAAKiB,SAAS,CAAEC,mBAAoBC,EAAEC,OAAOC,U,mCAUlCF,GAEX,GADAA,EAAEG,iBACGtB,KAAKY,MAAMM,mBAAhB,CACA,IAAMK,EAAU,CAAElB,YAAaL,KAAKY,MAAMM,mBAAoBhB,aAAa,GAE3EF,KAAKiB,SAAS,CAAEJ,MAAM,GAAD,mBAAMb,KAAKY,MAAMC,OAAjB,CAAwBU,IAAUL,mBAAoB,Q,qCAG9DR,GACb,IAAMG,EAAQb,KAAKY,MAAMC,MAAMW,QACzBT,EAAOF,EAAMH,GACnBK,EAAKb,aAAca,EAAKb,YACxBF,KAAKiB,SAAS,CAAEJ,MAAOA,M,+BAIf,IAAD,OACP,OACE,yBAAKY,UAAU,OACb,4BACIzB,KAAKY,MAAMC,MAAMa,KAAK,SAACX,EAAML,GAAP,OACtB,kBAAC,EAAD,CAAMiB,IAAMjB,EAAQL,YAAcU,EAAKV,YAAcH,YAAca,EAAKb,YAAcE,eAAiB,kBAAM,EAAKA,eAAeM,IAASH,WAAa,kBAAM,EAAKA,WAAWG,UAGjL,0BAAMkB,SAAW,SAACT,GAAD,OAAO,EAAKU,aAAaV,KACxC,2BAAOrB,KAAK,OAAOuB,MAAQrB,KAAKY,MAAMM,mBAAqBf,SAAW,SAACgB,GAAD,OAAO,EAAKW,aAAaX,MAC/F,2BAAOrB,KAAK,iB,GAlDJU,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e39eed10.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// 1. Add a delete button to the ToDo component. Check\n\n// 4. Add an onClick event listener to the delete button, and have it call deleteTodo, passing it the index of the to-do. Check\nclass ToDo extends Component {\n\n  render() {\n    return (\n      <li>\n        <input\n          type='checkbox'\n          checked={ this.props.isCompleted }\n          onChange={ this.props.toggleComplete }\n        />\n        <span>{ this.props.description }</span>\n        <button onClick={this.props.deleteTodo}>\n          Del\n        </button>\n      </li>\n    );\n  }\n}\n\nexport default ToDo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ToDo from './components/ToDo.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todos: [\n        { description: \"Run the Cats\", isCompleted: false },\n        { description: \"Delouse Baby\", isCompleted: false },\n        { description: \"Feed the Dowg\", isCompleted: false }\n      ],\n      newTodoDescription: ''\n    };\n  }\n\n  handleChange(e) {\n    this.setState({ newTodoDescription: e.target.value })\n  }\n\n// 2. Define a deleteTodo method on the App component. This method should call `this.setState()` and pass it a new array that doesn't have the to-do item being deleted. Consider using the `.filter()` array method to accomplish this without mutating state â€“ do not use .splice(), which is a mutable method, unless making a copy of the array first.\n\n  deleteTodo = (index) => {\n    const filteredTodos = this.state.todos.filter((todo, i) => i !==index)\n    this.setState({ todos : filteredTodos });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.newTodoDescription) { return }\n    const newTodo = { description: this.state.newTodoDescription, isCompleted: false };\n\n    this.setState({ todos: [...this.state.todos, newTodo], newTodoDescription: '' });\n  }\n\n  toggleComplete(index) {\n    const todos = this.state.todos.slice();\n    const todo = todos[index];\n    todo.isCompleted = todo.isCompleted ? false : true;\n    this.setState({ todos: todos });\n  }\n\n// 3. Pass the deleteTodo method to the ToDo component as a prop. Check\n  render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          { this.state.todos.map( (todo, index) =>\n            <ToDo key={ index } description={ todo.description } isCompleted={ todo.isCompleted } toggleComplete={ () => this.toggleComplete(index) } deleteTodo={ () => this.deleteTodo(index)} />\n          )}\n        </ul>\n        <form onSubmit={ (e) => this.handleSubmit(e) }>\n          <input type=\"text\" value={ this.state.newTodoDescription } onChange={ (e) => this.handleChange(e) } />\n          <input type=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}